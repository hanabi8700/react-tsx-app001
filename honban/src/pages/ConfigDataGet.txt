// 'use client';

// import React from 'react'
// import iconv from 'iconv-lite';
// import * as calc from '~/CalenderLib';
// import * as fs from 'fs';
import { number, string } from 'zod';
import Hanalib from '~/hanalibC01.js';

// type Props = {}
// fetchUrlArray: [
//     // 'https://hanamaru8700.com/cgi-bin/webcalhana/hanafullcal.py',
//     'https://hanamaru8700.com/cgi-bin/hanaflask/index.cgi/hanacalen/webcal',
//     'https://hanamaru8700.com/cgi-bin/hanaflask/index.cgi/hanacalen/holiday',
//     'https://hanamaru8700.com/cgi-bin/hanaflask/index.cgi/hanacalen/holiday003',
// ],

const ConfigDataGet = () => {
  // 取り込み先
  // const targetPath = '~/yearly3.dat';
  //const bin = fs.readFileSync('yearly3.dat');
  // const bin = fs.readFileSync(__dirname + '~/yearly3.dat');
  // const utf8 = iconv.decode(bin, 'Shift_JIS');
  // loadFile(targetPath,"sjis");
  // fs.readFile('data1.txt', 'utf-8', (err, data) => {
  //   if (err) throw err;
  //   console.log(data);
  // });

  //同期基本構文は、fs.readFileSync(path[, options])です。
  //同期基本構文はfs.writeFileSync(file, data[, options])
  //非同期基本構文はfs.readFile(path[, options], callback)です
  //非同期基本構文はfs.writeFile(file, data[, options], callback)です。
  // fs.readFile(targetPath, function (err, data) {
  //   if (err) throw err;
  //   // console.log( data.toString('UTF-8') );    // (参考)UTF-8の場合はtoString()メソッドで文字列を取り出せる
  //   const buf = new Buffer(data, 'binary'); //バイナリバッファを一時的に作成する
  //   const retStr = iconv.decode(buf, 'Shift_JIS'); //作成したバッファを使い、iconv-liteでShift-jisからutf8に変換
  //   console.log(retStr);
  // });
  // console.log('ファイル読み込みを待たずに後続処理が走ります。');
  // //
  // const csv = event.target.files[0];
  // const reader = new FileReader();
  // const readCsv = () => {
  //   const csvString = iconv.decode(Buffer.from(reader.result), "Shift_JIS");
  // };
  // reader.onload = readCsv;
  // reader.readAsArrayBuffer(csv);
  //   return (
  //     <div>ConfigDataGet</div>
  //   )
  // 取り込み先
  // const targetPath = '~/yearly3.dat';

  // // 出力内容
  // const distPath = {
  //   sjis: '../../dist/index_sjis.html',
  //   // euc: '../../dist/index_euc.html',
  // };
  // HTMLファイルを文字コード別に変換
  // fs.readFile(targetPath, (error, data) => {
  //   if (error) {
  //     throw error;
  //   }

  //   // Shift_JIS変換
  //   // convertHelper(distPath.sjis, 'Shift_JIS', data);
  //   // EUC-JP変換
  //   // convertHelper(distPath.euc, 'EUC-JP', data);
  //   convertHelper(distPath.sjis, 'UTC-8', data);
  // });
  // const buffer = fs.readFileSync('sjis.txt');
  // const str = '変換したい文字列';
  // const encoded = encode(str, 'SJIS'); //文字列をShift_JISに変換

  // const str = iconv.encode('山田', 'sjis');
  // console.log(str);
  const hanalib = new Hanalib();
  const urlsArray = [
    'https://jsonplaceholder.typicode.com/users',
    'https://jsonplaceholder.typicode.com/posts',
    'https://hanamaru8700.com/cgi-bin/hanaflask/index.cgi/hanacalen/webcal',
  ];
  // const ddd = hanalib.getJsonData(urlsArray);
  //normal
  //0: (2) [Array(10), Array(100)]1: {error: Array(0)}
  //--abnormal
  //0: [Array(100)]1: {error: Array(1)}length: 2
  // console.log('ddd', ddd);
  


  const obj: { [index: string]: number } = {
    b: 2,
    a: 1,
    c: 3,
  };

  const sortedObj: { [index: string]: number } = {};

  Object.keys(obj)
    .sort((a, b) => {
      if (a.toLowerCase() < b.toLowerCase()) {
        return -1;
      } else if (a.toLowerCase() > b.toLowerCase()) {
        return 1;
      } else {
        return 0;
      }
    })
    .forEach((key) => {
      sortedObj[key] = obj[key];
    });

  console.log(sortedObj); // { a: 1, b: 2, c: 3 }
  return;
};
/**
 * 文字コード変換ヘルパー
 * @param { String } distPath - 出力先のパス
 * @param { String } charCode - 文字コード
 * @param { any } data - 読み込みファイルデータ
 */
// function convertHelper(distPath: string, charCode: string, data: any) {
//   const fd = fs.openSync(distPath, "w");
//   const buf = iconv.encode(data, charCode);
//   fs.write(fd, buf, 0, buf.length, (error, _written, _buffer) => {
//     if (error) {
//       throw error;
//     }
//     console.log(`${distPath} の書き出しに成功しました`);
//   });
// }
export default ConfigDataGet;
